import numpy as np

class Activation_Step:
    def forward(self, inputs):
        self.output = np.where(inputs > 0, 1, 0)

class Activation_Linear:
    def forward(self, inputs):
        self.output = inputs

class Activation_Sigmoid:
    def forward(self, inputs):
        self.output = 1 / (1 + np.exp(-inputs))

class Activation_ReLU:
    def forward(self, inputs):
        self.output = np.maximum(0, inputs)

class Layer_Dense:
    def __init__(self, n_inputs, n_neurons):
        self.weights = 0.01 * np.random.randn(n_inputs, n_neurons)
        self.biases = np.zeros((1, n_neurons))

    def forward(self, inputs):
        self.output = np.dot(inputs, self.weights) + self.biases

import matplotlib.pyplot as plt

x = np.linspace(0, 2 * np.pi, 100).reshape(-1, 1)
y = np.sin(x)

layer1 = Layer_Dense(1, 8)
activation1 = Activation_ReLU()

layer2 = Layer_Dense(8, 1)
activation2 = Activation_Linear()

layer1.forward(x)
activation1.forward(layer1.output)

layer2.forward(activation1.output)
activation2.forward(layer2.output)

plt.plot(x, y, label="True Sine Wave", color="blue")
plt.plot(x, activation2.output, label="NN Output", color="red")
plt.legend()
plt.title("Sine Wave Approximation using Neural Network")
plt.show()
